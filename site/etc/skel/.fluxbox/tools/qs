#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  qs
#  
#  Copyright 2016 3hg team <3hg@lists.toile-libre.org>
#  
# Licence : MIT

import sys
import webbrowser
if sys.version_info >= (3, 0):
    from tkinter import *
    from tkinter import ttk
else:
    from Tkinter import *
    import ttk

text_="""d     :      duckduckgo
g     :      google
w     :      wikipedia
bee   :      framabee
q     :      qwant
sw    :      searx
i     :      ixquick
e     :      ecosia
v     :      vimeo
y     :      youtube
dic   :      dictionnaire
syn   :      synonyme
"""
text2_="""
Le motif est facultatif
Appuyez sur <Entrée> pour valider
"""

engines={'d' : 'https://duckduckgo.com/?kh=1&kl=fr-fr&ks=m&kj=kt&ky=-1&kad=fr_FR&q=',\
'bee' :'https://framabee.org/?q=',\
'sx' : 'https://searx.laquadrature.net/?pageno=1&category_general&q=',\
'i' : 'https://eu.ixquick.com/do/metasearch.pl?prf=bd4576073b8d7d8ed0ea139531270ca9&query=',\
'e' : 'https://www.ecosia.org/search.php?q=',\
'g' : 'https://startpage.com/do/search?query=',\
'w' : 'http://fr.wikipedia.org/w/index.php?title=Spécial%3ARecherche&search=',\
'q' :  'https://www.qwant.com/?q=',\
'v' : 'https://vimeo.com/search?q=',\
'wikien' : 'http://en.wikipedia.org/w/index.php?title=Spécial%3ARecherche&search=',\
'dic' : 'http://www.le-dictionnaire.com/definition.php?mot=',\
'syn' : 'http://www.synonymes.com/synonyme.php?mot=',\
'y' : 'http://www.youtube.com/results?search_query=',\
'en2fr' : 'http://www.wordreference.com/enfr/',\
'fr2en' : 'http://www.wordreference.com/fren/',\
'dpackage' : 'http://packages.debian.org/search?keywords='}

default='d'

class MyWindow():

    def __init__(self):

        # main window
        self.root = Tk()

        # style
        #('clam', 'alt', 'default', 'classic')
        style = ttk.Style()
        style.theme_use("clam")
        style.configure('TNotebook', tabposition='n')

        self.root.title("Rechercher sur le web")

        mainframe = ttk.Frame(self.root)
        mainframe.pack(fill=BOTH,expand=True)

        label = Label(mainframe,text=text_, font=("monospace", 10), justify=LEFT)
        label.pack(expand=True, fill=BOTH)

        sep = ttk.Separator(mainframe)
        sep.pack()

        label = Label(mainframe,text=text2_, font=("monospace", 10), justify=LEFT)
        label.pack(expand=True, fill=BOTH)
        
        self.entry = ttk.Entry(mainframe)
        self.entry.pack(fill=X,expand=True)
        self.entry.bind("<Return>", self.search)
        self.entry.focus_set()


        try :
            c = self.root.clipboard_get().strip()
            if c:
                self.entry.delete(0, END)
                self.entry.insert(0, c)
        except:
            c= ""

        self.root.mainloop()

    def search(self, event):
        s = self.entry.get().strip()

        if len(s) > 0:
            e = s.split(' ',1)
            if e[0] in engines.keys():
                url="{0}{1}".format(engines[e[0]], e[1].replace(' ','+'))
            else:
                url="{0}{1}".format(engines[default], s.replace(' ','+'))
            webbrowser.open(url)
            self.root.destroy()


def main():
    win = MyWindow()
    return 0

if __name__ == '__main__':
	main()

