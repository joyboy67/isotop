#!/usr/bin/env python3.4
# -*- coding: utf-8 -*-
# ovol : change openBSD sound volume
# Licence : MIT

import sys
from subprocess import call, Popen, PIPE
from tkinter import *
from tkinter import ttk

appname="Volume"

class Gui():

    def __init__(self):
        self.root = Tk()
        self.root.title(appname)

        self.mainframe = ttk.Frame(self.root, padding="3 3 12 12")
        self.mainframe.pack()

        ttk.Label(self.mainframe, text="Volume :").pack()

        w = ttk.Scale(self.mainframe)
        w = Scale(self.mainframe, from_=0, to=100, orient=HORIZONTAL, command=setvol)
        w.set(getvol())
        w.pack()

        self.mutebtn = ttk.Button(self.mainframe, text="Mute", command=self.mute)
        self.mutebtn.pack(expand=False)
        if ismuted():
            self.mutebtn.config(text="Unmute")

        self.root.mainloop()

    def mute(self):
        call(['mixerctl', 'outputs.master.mute=toggle'])
        if ismuted():
            self.mutebtn.config(text="Unmute")
        else:
            self.mutebtn.config(text="Mute")

def main():
    app = Gui()
    return 0

def getvol():
    vol = Popen(['mixerctl', 'outputs.master'], stdout=PIPE).stdout
    vol = vol.read().decode().strip()
    return(int(vol.split(',')[-1]) / 255 * 100)

def ismuted():
    m = Popen(['mixerctl', 'outputs.master.mute'], stdout=PIPE).stdout
    m = m.read().decode().strip()
    m = m.split('=')[-1]
    if m == "off":
        return False
    else:
        return True

def setvol(vol):
    vol = int(int(vol) / 100 * 255)
    call(['mixerctl', 'outputs.master={}'.format(vol)])


if __name__ == '__main__':
	main()


# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4

